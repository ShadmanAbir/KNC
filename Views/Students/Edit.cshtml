@model KNC.Models.Student

@{
    ViewBag.Title = "Edit Student";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h4 class="mb-4 text-primary fw-bold">Edit Student Information</h4>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card shadow p-4">
        @Html.HiddenFor(model => model.StudentID)

        @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.FirstName, new { @class = "form-label" })
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control is-filled is-focused" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.LastName, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control is-filled" })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control is-filled" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.Phone, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control is-filled" })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.CurrentAddress, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.CurrentAddress, new { @class = "form-control is-filled" })
                    @Html.ValidationMessageFor(model => model.CurrentAddress, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.PermanentAddress, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.PermanentAddress, new { @class = "form-control is-filled" })
                    @Html.ValidationMessageFor(model => model.PermanentAddress, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.AdmissionDate, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.AdmissionDate, new { @class = "form-control flatpickr", @autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.AdmissionDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group input-group-outline">
                    @Html.LabelFor(model => model.Program, new { @class = "form-label" })
                    @Html.DropDownListFor(model => model.Program, ViewBag.ProgramList as SelectList, "", new { @class = "form-select is-filled" })
                    @Html.ValidationMessageFor(model => model.Program, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="text-end">
            <input type="submit" value="Update" class="btn btn-primary" />
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary ms-2" })
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        flatpickr(".flatpickr", {
            dateFormat: "Y-m-d",
            allowInput: true,
            altInput: true,
            altFormat: "F j, Y"
        });
    </script>
}
